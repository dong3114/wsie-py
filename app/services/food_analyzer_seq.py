# -*- coding: utf-8 -*-
"""음식 분석 스크립트 (Sequential)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t0Y6htNhzwCwDaaJELwz0o5h1GGqCAXX
"""

# -*- coding: utf-8 -*-
"""
음식물 쓰레기 이미지 분석 및 리포트 생성 스크립트 (SequentialChain 방식)
"""
from dotenv import load_dotenv
load_dotenv()

import base64
import os
import json
from openai import OpenAI
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

# -----------------------------
# 0. 초기화
# -----------------------------
# API 키는 환경 변수(OPENAI_API_KEY)에 설정해두는 것이 좋습니다.
try:
    client = OpenAI()
    llm = ChatOpenAI(model="gpt-4o", temperature=0)
except Exception as e:
    print(f"🚨 OpenAI 또는 LangChain 초기화 중 오류가 발생했습니다.")
    print("OPENAI_API_KEY가 올바르게 설정되었는지 확인해주세요.")
    print(f"오류 상세: {e}")
    exit()

# -----------------------------
# 1. 멀티모달 분석 함수
# -----------------------------
def analyze_food(image_path: str) -> str:
    """이미지 경로를 받아 GPT-4o로 분석하고 결과를 JSON 문자열로 반환합니다."""
    try:
        with open(image_path, "rb") as f:
            img_bytes = f.read()
        img_base64 = base64.b64encode(img_bytes).decode("utf-8")

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "당신은 식당의 남긴 음식 분석 전문가입니다. JSON으로만 답변하세요."},
                {"role": "user",
                 "content": [
                     {"type": "text", "text": "이 음식 사진을 보고 음식 종류와 남은 양을 JSON 형식으로 분석해주세요."},
                     {"type": "image_url",
                      "image_url": {"url": f"data:image/jpeg;base64,{img_base64}"}}
                 ]}
            ]
        )
        return response.choices[0].message.content
    except FileNotFoundError:
        print(f"오류: 이미지 파일을 찾을 수 없습니다. 경로를 확인하세요: {image_path}")
        return None
    except Exception as e:
        print(f"분석 중 오류 발생: {e}")
        return None

# -----------------------------
# 2. LangChain 체인 구성
# -----------------------------
def setup_chains():
    """리포트와 개선 방안을 생성하는 두 개의 LLMChain을 구성합니다."""
    # 리포트 생성 체인
    report_prompt = PromptTemplate(
        input_variables=['analysis'],
        template="""
    다음은 식판 잔반 분석 결과입니다:
    {analysis}

    이 결과를 바탕으로 식당 잔반 리포트를 작성하세요.
    각 항목별로 문장 단락으로 작성하세요.
    예: "밥은 절반 남았습니다. 김치는 거의 다 먹었습니다. 나물은 그대로 입니다."
    """
    )
    report_chain = LLMChain(llm=llm, prompt=report_prompt, output_key="report")

    # 개선 방안 생성 체인
    improve_prompt = PromptTemplate(
        input_variables=['analysis'],
        template="""
    다음은 잔반 분석 결과입니다:
    {analysis}

    이 결과를 바탕으로 식당 음식 개선 방안을 제안해주세요.
    이 결과만 바탕으로 **순수 텍스트 리포트**로 작성하세요.
    날짜/작성자/연락처 등은 포함하지 마세요.
    """
    )
    improve_chain = LLMChain(llm=llm, prompt=improve_prompt, output_key='improvements')

    return report_chain, improve_chain

# -----------------------------
# 3. 메인 실행 함수
# -----------------------------
def main():
    """메인 실행 로직"""
    print("--- 음식물 쓰레기 분석기 (Sequential 방식) ---")

    image_path = input("분석할 이미지 파일의 경로를 입력하세요 (예: ./data/3.jpg): ")

    if not os.path.exists(image_path):
        print(f"오류: '{image_path}' 경로에 파일이 없습니다.")
        return

    print("\n1. 이미지를 분석 중입니다...")
    analysis_result = analyze_food(image_path)

    if analysis_result:
        print("분석 완료!")

        report_chain, improve_chain = setup_chains()

        print("\n2. 리포트 및 개선 방안을 생성 중입니다...")
        report = report_chain.run({"analysis": analysis_result})
        improvements = improve_chain.run({"analysis": analysis_result})
        print("생성 완료!")

        print("\n\n--- 최종 결과 ---")
        print("📌 리포트:")
        print(report)

        print("\n📌 개선 방안:")
        print(improvements)

if __name__ == "__main__":
    main()